name: CI/CD

on:
  push:
    branches: [develop, ref, main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  format:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Find C++ files
        id: files
        run: |
          FILES=$(find . -type f -regex '.*\.\(cpp\|hpp\|h\)$' \
                  -not -path "./build/*" \
                  -not -path "./third_party/*")
          echo "files=${FILES}" >> $GITHUB_OUTPUT

      - name: Apply clang-format
        if: steps.files.outputs.files != ''
        run: |
          echo "${{ steps.files.outputs.files }}" | xargs clang-format -i --style=file

      - name: Commit changes
        if: steps.files.outputs.files != ''
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git diff --quiet && git diff --staged --quiet || \
            (git commit -m "[Automated] Apply clang-format" && \
             git push origin ${{ github.ref }})


  clang-format:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check formatting
        run: |
          FILES=$(find . -type f -regex '.*\.\(cpp\|hpp\|h\)$' \
                  -not -path "./build/*" \
                  -not -path "./third_party/*")

          if [ -z "$FILES" ]; then
            echo "No C++ files found. Skipping."
            exit 0
          fi

          echo "Checking formatting for files:"
          echo "$FILES"

          clang-format --dry-run --Werror --style=file $FILES || \
            (echo "❌ Formatting errors found! Run 'clang-format -i YOUR_FILE' to fix."; exit 1)

  build:
    runs-on: ubuntu-latest
    needs: [clang-format]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libsfml-dev g++-10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

      - name: Configure CMake
        run: |
          mkdir -p App/build
          cd App/build
          cmake .. -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        working-directory: ./App/build
        run: cmake --build . --config Release -- -j $(nproc)

      - name: Verify executable
        working-directory: ./App
        run: |
          if [ -f "./ImageEditor" ]; then
            echo "✅ Executable built successfully"
            ls -lh ./ImageEditor
          else
            echo "❌ Executable not found!"
            exit 1
          fi
