name: CI/CD

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  CCACHE_DIR: /tmp/ccache
  CMAKE_ARGS: -DCMAKE_CXX_FLAGS="-O3"

jobs:
  clang-format:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref || github.ref }}

    - name: Install clang-format
      run: sudo apt-get update && sudo apt-get install -y --no-install-recommends clang-format

    - name: Check formatting
      run: |
        FILES=$(find . -type f -regex '.*\.\(cpp\|hpp\|h\)$' \
                -not -path "./build/*" \
                -not -path "./third_party/*")
        
        if [ -z "$FILES" ]; then
          echo "No C++ files found. Skipping."
          exit 0
        fi

        echo "Checking formatting for files:"
        echo "$FILES"

        clang-format --dry-run --Werror --style=file $FILES || \
          (echo "❌ Formatting errors found! Run 'clang-format -i YOUR_FILE' to fix."; exit 1)

  setup-dependencies:
    runs-on: ubuntu-22.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
    - name: Generate cache key
      id: cache-key
      run: echo "value=$(date +%Y-%m-%d)-${{ hashFiles('**/CMakeLists.txt') }}" >> $GITHUB_OUTPUT

  build-template:
    runs-on: ubuntu-22.04
    needs: setup-dependencies
    strategy:
      matrix:
        std: [11, 14, 17, 20]
    env:
      CXX_STANDARD: ${{ matrix.std }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref || github.ref }}

    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache
          /usr/local
          App/build
          /tmp/ccache
        key: ${{ runner.os }}-${{ needs.setup-dependencies.outputs.cache-key }}-cpp${{ matrix.std }}

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-ccache-${{ needs.setup-dependencies.outputs.cache-key }}

    - name: Install minimal dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends cmake libsfml-dev g++-10 ccache
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

    - name: Configure and build (C++${{ matrix.std }})
      run: |
        mkdir -p App/build
        cd App/build
        cmake .. $CMAKE_ARGS \
          -DCMAKE_CXX_COMPILER=g++-10 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=${{ matrix.std }}
        cmake --build . --config Release -- -j $(nproc)

    - name: Verify executable
      working-directory: ./App
      run: |
        if [ -f "./ImageEditor" ]; then
          echo "✅ Executable built successfully (C++${{ matrix.std }})"
          ls -lh ./ImageEditor
        else
          echo "❌ Executable not found!"
          exit 1
        fi
